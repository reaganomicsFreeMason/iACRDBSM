package codegen

import (
	"iACRDBSM/db-engine/parser"
)

const bigcap = 500

var insns []ByteCodeOp

/*GenByteCode :
Walks along the AST generated by the sqlparser library
and generates bytecode that will be executed by the virtual
machine to carry out the sql command. The bytecode langauge
is defined in codegen/ops.go
*/
func GenByteCode(stmt *parser.SelectStmt) ([]ByteCodeOp, error) {
	insns := make([]ByteCodeOp, 0, bigcap)
	visitSelect(*stmt)
	return insns, nil
}

// Compile a select statement into bytecode
func visitSelect(stmt parser.SelectStmt) {
	tableNames := stmt.TableNames
	// TODO: Handle joins
	insns = append(insns, GetTableOp{*tableNames[0]})
	// Generate insns to add columns we want
	for _, colName := range stmt.ColNames {
		insns = append(insns, AddColumnOp{*colName})
	}
	// Generate insns for conditions in WHERE clause
	for _, cond := range stmt.Conditions {
		colName := cond.ColName
		valName := cond.ValName
		insns = append(insns, FilterOp{colName, valName})
	}
}
